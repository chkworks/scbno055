####################################################################################################
# CMakeLists file for BNO
# Generated by Johannes Burstr√∂m
# 2021-10-11
####################################################################################################

set(CMAKE_CXX_COMPILER_WORKS 1)
set(CMAKE_C_COMPILER_WORKS 1)

####################################################################################################
# basic project config
cmake_minimum_required(VERSION 3.7)
set(project_name "BNO")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules ${CMAKE_MODULE_PATH})
set(CMAKE_CXX_STANDARD 11)

####################################################################################################
# load modules
include(SuperColliderServerPlugin RESULT_VARIABLE server_plugin_found)
if(NOT server_plugin_found)
    message(FATAL_ERROR "Could not find server plugin functions module")
endif()

include(SuperColliderCompilerConfig RESULT_VARIABLE compiler_config_found)
if(NOT compiler_config_found)
    message(FATAL_ERROR "Could not find compiler config module")
endif()

# Windows - puts redistributable DLLs in install directory
include(InstallRequiredSystemLibraries)

sc_check_sc_path("${SC_PATH}")
message(STATUS "Found SuperCollider: ${SC_PATH}")
set(SC_PATH "${SC_PATH}" CACHE PATH
    "Path to SuperCollider source. Relative paths are treated as relative to this script" FORCE)

include("${SC_PATH}/SCVersion.txt")
message(STATUS "Building plugins for SuperCollider version: ${SC_VERSION}")

# set project here to avoid SCVersion.txt clobbering our version info
project(${project_name})
sc_do_initial_compiler_config() # do after setting project so compiler ID is available

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
    message(WARNING "No install prefix provided, defaulting to $BUILD_DIR/install")
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
endif()

message(STATUS "Install directory set to: ${CMAKE_INSTALL_PREFIX}")


###################################################################################################
# Optimizations, see eg. https://github.com/TheTechnobear/SoundplaneLite/blob/master/CMakeLists.txt
if (NOT DEFINED CPU_OPTIMIZATION_FLAGS)
    if (APPLE)
    elseif (UNIX)
        if (${CMAKE_SYSTEM_PROCESSOR} MATCHES "^arm")
            if (BELA)
                message(STATUS "BELA optimized")
                set(CMAKE_BUILD_TYPE Release) # this has to come after project()
                set(CMAKE_CXX_FLAGS "-O3 ${CMAKE_CXX_FLAGS}")
                set(CMAKE_C_FLAGS "-O3 ${CMAKE_C_FLAGS}")
        	    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv7-a -mtune=cortex-a8 -mfloat-abi=hard -mfpu=neon -ftree-vectorize")
        	    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DBELA")
                if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
                    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ffast-math")
                else()
                    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsingle-precision-constant --fast-math")
                endif()

		set(BELA_PATH /root/Bela/)
		include_directories(${BELA_PATH})
		include_directories(${BELA_PATH}/include)
		include_directories(${BELA_PATH}/lib)
		include_directories(${BELA_PATH}/libraries)

                set(BELA_LINK_FLAGS "-v ${BELA_LINK_FLAGS} -Wl,--no-as-needed -L/usr/xenomai/lib -lcobalt -lmodechk -lpthread -lrt")
                set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${BELA_LINK_FLAGS}")
                set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${BELA_LINK_FLAGS}")
                set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${BELA_LINK_FLAGS}")
                set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} ${BELA_LINK_FLAGS} ")
            else ()
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv7-a -mfpu=neon -mfloat-abi=hard")
            endif ()
        else ()
            #        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -Wall")
        endif ()
    endif ()
else()
    message(STATUS "Using provided optimization flags '${CPU_OPTIMIZATION_FLAGS}'")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CPU_OPTIMIZATION_FLAGS}")
endif ()


####################################################################################################
# options
option(SUPERNOVA "Build plugins for supernova" ON)
option(SCSYNTH "Build plugins for scsynth" ON)
option(NATIVE "Optimize for native architecture" OFF)
option(STRICT "Use strict warning flags" OFF)
option(NOVA_SIMD "Build plugins with nova-simd support." ON)

####################################################################################################
# include libraries

if (NOVA_SIMD)
	add_definitions(-DNOVA_SIMD)
	include_directories(${SC_PATH}/external_libraries/nova-simd)
endif()

####################################################################################################
# Begin target BNO

set(BNO_cpp_files
    plugins/BNO/BNO.cpp
    plugins/BNO/imu/Bela_BNO055.cpp
    plugins/BNO/imu/SC_BNO055.cpp
    plugins/BNO/imu/quaternion.h
    plugins/BNO/imu/matrix.h
    plugins/BNO/imu/imumaths.h
    plugins/BNO/imu/SC_BNO055.h
    plugins/BNO/imu/Bela_BNO055.h
    plugins/BNO/imu/vector.h
)
set(BNO_sc_files
    plugins/BNO/BNO.sc
)
set(BNO_schelp_files
    plugins/BNO/HelpSource/Classes/BNO.schelp
)

sc_add_server_plugin(
    "BNO/BNO" # desination directory
    "BNO" # target name
    "${BNO_cpp_files}"
    "${BNO_sc_files}"
    "${BNO_schelp_files}"
)

# End target BNO
####################################################################################################

####################################################################################################
# END PLUGIN TARGET DEFINITION
####################################################################################################

message(STATUS "Generating plugin targets done")
